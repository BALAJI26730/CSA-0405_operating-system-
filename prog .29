#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5

sem_t chopstick[N];

void *philosopher(void *num) {
    int id = *(int *)num;

    printf("Philosopher %d is thinking...\n", id);
    sleep(1);

    sem_wait(&chopstick[id]);
    sem_wait(&chopstick[(id+1)%N]);

    printf("Philosopher %d is eating...\n", id);
    sleep(2);

    sem_post(&chopstick[id]);
    sem_post(&chopstick[(id+1)%N]);

    printf("Philosopher %d finished eating.\n", id);
    return NULL;
}

int main() {
    pthread_t tid[N];
    int i, id[N];

    for (i=0; i<N; i++) {
        sem_init(&chopstick[i], 0, 1);
        id[i] = i;
    }

    for (i=0; i<N; i++)
        pthread_create(&tid[i], NULL, philosopher, &id[i]);

    for (i=0; i<N; i++)
        pthread_join(tid[i], NULL);

    return 0;
}
output : 
Philosopher 0 is thinking...
Philosopher 1 is thinking...
Philosopher 2 is thinking...
Philosopher 3 is thinking...
Philosopher 4 is thinking...
Philosopher 0 is eating...
Philosopher 2 is eating...
Philosopher 0 finished eating.
Philosopher 1 is eating...
...
